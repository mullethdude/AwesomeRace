// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("Flivver"), bytes16("FizState")));
bytes32 constant FizStateTableId = _tableId;

struct FizStateData {
  int32 x;
  int32 y;
  int32 z;
  int32 dx;
  int32 dy;
  int32 dz;
  int32 ax;
  int32 ay;
  int32 az;
  uint64 lTs;
  uint64 ts;
  bool stat;
}

library FizState {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](12);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.INT32;
    _schema[3] = SchemaType.INT32;
    _schema[4] = SchemaType.INT32;
    _schema[5] = SchemaType.INT32;
    _schema[6] = SchemaType.INT32;
    _schema[7] = SchemaType.INT32;
    _schema[8] = SchemaType.INT32;
    _schema[9] = SchemaType.UINT64;
    _schema[10] = SchemaType.UINT64;
    _schema[11] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](12);
    _fieldNames[0] = "x";
    _fieldNames[1] = "y";
    _fieldNames[2] = "z";
    _fieldNames[3] = "dx";
    _fieldNames[4] = "dy";
    _fieldNames[5] = "dz";
    _fieldNames[6] = "ax";
    _fieldNames[7] = "ay";
    _fieldNames[8] = "az";
    _fieldNames[9] = "lTs";
    _fieldNames[10] = "ts";
    _fieldNames[11] = "stat";
    return ("FizState", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get x */
  function getX(bytes32 key) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, bytes32 key) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set x */
  function setX(bytes32 key, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, bytes32 key, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)));
  }

  /** Get y */
  function getY(bytes32 key) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, bytes32 key) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set y */
  function setY(bytes32 key, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, bytes32 key, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)));
  }

  /** Get z */
  function getZ(bytes32 key) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get z (using the specified store) */
  function getZ(IStore _store, bytes32 key) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set z */
  function setZ(bytes32 key, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((z)));
  }

  /** Set z (using the specified store) */
  function setZ(IStore _store, bytes32 key, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((z)));
  }

  /** Get dx */
  function getDx(bytes32 key) internal view returns (int32 dx) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dx (using the specified store) */
  function getDx(IStore _store, bytes32 key) internal view returns (int32 dx) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dx */
  function setDx(bytes32 key, int32 dx) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((dx)));
  }

  /** Set dx (using the specified store) */
  function setDx(IStore _store, bytes32 key, int32 dx) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((dx)));
  }

  /** Get dy */
  function getDy(bytes32 key) internal view returns (int32 dy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dy (using the specified store) */
  function getDy(IStore _store, bytes32 key) internal view returns (int32 dy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dy */
  function setDy(bytes32 key, int32 dy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((dy)));
  }

  /** Set dy (using the specified store) */
  function setDy(IStore _store, bytes32 key, int32 dy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((dy)));
  }

  /** Get dz */
  function getDz(bytes32 key) internal view returns (int32 dz) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dz (using the specified store) */
  function getDz(IStore _store, bytes32 key) internal view returns (int32 dz) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dz */
  function setDz(bytes32 key, int32 dz) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((dz)));
  }

  /** Set dz (using the specified store) */
  function setDz(IStore _store, bytes32 key, int32 dz) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((dz)));
  }

  /** Get ax */
  function getAx(bytes32 key) internal view returns (int32 ax) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get ax (using the specified store) */
  function getAx(IStore _store, bytes32 key) internal view returns (int32 ax) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set ax */
  function setAx(bytes32 key, int32 ax) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((ax)));
  }

  /** Set ax (using the specified store) */
  function setAx(IStore _store, bytes32 key, int32 ax) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((ax)));
  }

  /** Get ay */
  function getAy(bytes32 key) internal view returns (int32 ay) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get ay (using the specified store) */
  function getAy(IStore _store, bytes32 key) internal view returns (int32 ay) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set ay */
  function setAy(bytes32 key, int32 ay) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((ay)));
  }

  /** Set ay (using the specified store) */
  function setAy(IStore _store, bytes32 key, int32 ay) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((ay)));
  }

  /** Get az */
  function getAz(bytes32 key) internal view returns (int32 az) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get az (using the specified store) */
  function getAz(IStore _store, bytes32 key) internal view returns (int32 az) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set az */
  function setAz(bytes32 key, int32 az) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked((az)));
  }

  /** Set az (using the specified store) */
  function setAz(IStore _store, bytes32 key, int32 az) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked((az)));
  }

  /** Get lTs */
  function getLTs(bytes32 key) internal view returns (uint64 lTs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Get lTs (using the specified store) */
  function getLTs(IStore _store, bytes32 key) internal view returns (uint64 lTs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Set lTs */
  function setLTs(bytes32 key, uint64 lTs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 9, abi.encodePacked((lTs)));
  }

  /** Set lTs (using the specified store) */
  function setLTs(IStore _store, bytes32 key, uint64 lTs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 9, abi.encodePacked((lTs)));
  }

  /** Get ts */
  function getTs(bytes32 key) internal view returns (uint64 ts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 10);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Get ts (using the specified store) */
  function getTs(IStore _store, bytes32 key) internal view returns (uint64 ts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 10);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Set ts */
  function setTs(bytes32 key, uint64 ts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 10, abi.encodePacked((ts)));
  }

  /** Set ts (using the specified store) */
  function setTs(IStore _store, bytes32 key, uint64 ts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 10, abi.encodePacked((ts)));
  }

  /** Get stat */
  function getStat(bytes32 key) internal view returns (bool stat) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 11);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get stat (using the specified store) */
  function getStat(IStore _store, bytes32 key) internal view returns (bool stat) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 11);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set stat */
  function setStat(bytes32 key, bool stat) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 11, abi.encodePacked((stat)));
  }

  /** Set stat (using the specified store) */
  function setStat(IStore _store, bytes32 key, bool stat) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 11, abi.encodePacked((stat)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (FizStateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (FizStateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    int32 x,
    int32 y,
    int32 z,
    int32 dx,
    int32 dy,
    int32 dz,
    int32 ax,
    int32 ay,
    int32 az,
    uint64 lTs,
    uint64 ts,
    bool stat
  ) internal {
    bytes memory _data = encode(x, y, z, dx, dy, dz, ax, ay, az, lTs, ts, stat);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    int32 x,
    int32 y,
    int32 z,
    int32 dx,
    int32 dy,
    int32 dz,
    int32 ax,
    int32 ay,
    int32 az,
    uint64 lTs,
    uint64 ts,
    bool stat
  ) internal {
    bytes memory _data = encode(x, y, z, dx, dy, dz, ax, ay, az, lTs, ts, stat);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, FizStateData memory _table) internal {
    set(
      key,
      _table.x,
      _table.y,
      _table.z,
      _table.dx,
      _table.dy,
      _table.dz,
      _table.ax,
      _table.ay,
      _table.az,
      _table.lTs,
      _table.ts,
      _table.stat
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, FizStateData memory _table) internal {
    set(
      _store,
      key,
      _table.x,
      _table.y,
      _table.z,
      _table.dx,
      _table.dy,
      _table.dz,
      _table.ax,
      _table.ay,
      _table.az,
      _table.lTs,
      _table.ts,
      _table.stat
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (FizStateData memory _table) {
    _table.x = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.y = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.z = (int32(uint32(Bytes.slice4(_blob, 8))));

    _table.dx = (int32(uint32(Bytes.slice4(_blob, 12))));

    _table.dy = (int32(uint32(Bytes.slice4(_blob, 16))));

    _table.dz = (int32(uint32(Bytes.slice4(_blob, 20))));

    _table.ax = (int32(uint32(Bytes.slice4(_blob, 24))));

    _table.ay = (int32(uint32(Bytes.slice4(_blob, 28))));

    _table.az = (int32(uint32(Bytes.slice4(_blob, 32))));

    _table.lTs = (uint64(Bytes.slice8(_blob, 36)));

    _table.ts = (uint64(Bytes.slice8(_blob, 44)));

    _table.stat = (_toBool(uint8(Bytes.slice1(_blob, 52))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int32 x,
    int32 y,
    int32 z,
    int32 dx,
    int32 dy,
    int32 dz,
    int32 ax,
    int32 ay,
    int32 az,
    uint64 lTs,
    uint64 ts,
    bool stat
  ) internal view returns (bytes memory) {
    return abi.encodePacked(x, y, z, dx, dy, dz, ax, ay, az, lTs, ts, stat);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
