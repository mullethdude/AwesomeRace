/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/utils";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Counter: (() => {
      const tableId = new TableId("Flivver", "Counter");
      return defineComponent(
        world,
        {
          value: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    GridBolid: (() => {
      const tableId = new TableId("Flivver", "GridBolid");
      return defineComponent(
        world,
        {
          playerRef: RecsType.String,
          stateMind: RecsType.Boolean,
          stateFiz: RecsType.Boolean,
          position: RecsType.Boolean,
          stateLoc: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    OwnerList: (() => {
      const tableId = new TableId("Flivver", "OwnerList");
      return defineComponent(
        world,
        {
          owner: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    GridTrack: (() => {
      const tableId = new TableId("Flivver", "GridTrack");
      return defineComponent(
        world,
        {
          width: RecsType.Number,
          height: RecsType.Number,
          grid: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    RaceRegister: (() => {
      const tableId = new TableId("Flivver", "RaceRegister");
      return defineComponent(
        world,
        {
          active: RecsType.Boolean,
          racer: RecsType.Number,
          ontrack: RecsType.Number,
          starting: RecsType.BigInt,
          go: RecsType.Boolean,
          prog: RecsType.Boolean,
          nameandkey: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    FizState: (() => {
      const tableId = new TableId("Flivver", "FizState");
      return defineComponent(
        world,
        {
          x: RecsType.Number,
          y: RecsType.Number,
          z: RecsType.Number,
          dx: RecsType.Number,
          dy: RecsType.Number,
          dz: RecsType.Number,
          ax: RecsType.Number,
          ay: RecsType.Number,
          az: RecsType.Number,
          lTs: RecsType.BigInt,
          ts: RecsType.BigInt,
          stat: RecsType.Boolean,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
